<?xml version="1.0"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:template match="/">
<html>
<head><title>Vulnerability Summary</title></head>
<style>
table {
    border-collapse: collapse;
    width: 100%;
}

th, td {
    text-align: center;
    padding: 8px;
}

tr:nth-child(even){background-color: #f2f2f2}
</style>
<body>
<table id="cve-table">
<tr>
<xsl:text>&#x0A;</xsl:text>
<xsl:comment>When a header is clicked, run the sortTable function, with a parameter, 0 for sorting by CVE id, 1 for sorting by Severity, etc</xsl:comment>
<xsl:text>&#x0A;</xsl:text>
<th onclick="sortTable(0)">CVE</th>
<th onclick="sortTable(1)">Severity</th>
<th onclick="sortTable(2)">Source</th>
<th onclick="sortTable(3)">Reported Date</th>
<th onclick="sortTable(4)">CVSS</th>
<th onclick="sortTable(5)">Advisories</th>
<th onclick="sortTable(6)">Public Date</th>
<th onclick="sortTable(7)">Public Days before Fix</th>
</tr><xsl:text>&#x0A;</xsl:text>
<xsl:for-each select="summary/item">
<tr>
<td><a href="https://access.redhat.com/security/cve/{cve}"><xsl:value-of select="cve"/></a></td>
<td><xsl:value-of select="severity"/></td>
<td><xsl:value-of select="source"/></td>
<td><xsl:value-of select="reportedon"/></td>
<td><xsl:value-of select="cvss"/></td>
<td>
<xsl:text>&#x0A;</xsl:text>
<xsl:for-each select="fixedby">
<xsl:variable name="rhsanum"><xsl:value-of select="translate(.,':','-')"/></xsl:variable>
<a href="http://rhn.redhat.com/errata/{$rhsanum}.html"><xsl:value-of select="."/></a>
<br/><xsl:text>&#x0A;</xsl:text>
</xsl:for-each>
</td>
<td><xsl:value-of select="publicon"/></td>
<td><xsl:value-of select="daysdiff"/></td>
</tr><xsl:text>&#x0A;</xsl:text>
</xsl:for-each>
</table>
<script>
<![CDATA[function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById("cve-table");
  switching = true;
  //Set the sorting direction to ascending:
  dir = "asc";
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.getElementsByTagName("TR");
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i < (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].getElementsByTagName("TD")[n];
      y = rows[i + 1].getElementsByTagName("TD")[n];
      /*check if the two rows should switch place,
      based on the direction, asc or desc:*/
      if (dir == "asc") {
        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      } else if (dir == "desc") {
        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      //Each time a switch is done, increase this count by 1:
      switchcount ++;
    } else {
      /*If no switching has been done AND the direction is "asc",
      set the direction to "desc" and run the while loop again.*/
      if (switchcount == 0 && dir == "asc") {
        dir = "desc";
        switching = true;
      }
    }
  }
}]]>
</script>
</body></html>
</xsl:template>
</xsl:stylesheet>
